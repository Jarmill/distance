classdef location_distance < location
    %LOCATION_DISTANCE A location (space) of a dynamical system
    % Specifically designed to compare distances from points along
    % trajectories to points in an unsafe set
    
    properties
        dist; %distance penalty to be used
        
        wass; %wasserstein joint probability measure for distance
    end
    
    methods
        function obj = location_distance(unsafe_supp, f, id)
            %LOCATION_DISTANCE Construct an instance of this class
            %   Detailed explanation goes here
            if nargin < 4
                id = [];   
            end
            
            %superclass constructor
            obj@location(unsafe_supp, f, 0, id);
            
            %now deal with customized code for distance estimation            
            obj.dist = obj.process_distance(unsafe_supp.dist);
            
            vars_wass = struct('x', obj.vars.x, 'y', obj.vars.y);
            
            %generalize to multiple unsafe sets 
%             unsafe_supp.
            if ~iscell(obj.supp.X_unsafe)
                obj.supp.X_unsafe= {obj.supp.X_unsafe};         
            end
            
            %define wasserstein measures
            N_unsafe = length(obj.supp.X_unsafe);
            obj.wass = cell(N_unsafe, 1);
            

            for i = 1:N_unsafe
                suffix = '_wass';
                if N_unsafe > 1
                    suffix = ['_', num2str(i), suffix];
                end
                if ~isempty(id)
                    suffix = ['_', num2str(loc_id), suffix];
                end
                obj.wass{i} = obj.meas_wass_def(suffix, obj.supp.X, obj.supp.X_unsafe{i});
            end
        end
        
        function meas_new = meas_wass_def(obj, suffix, supp_X, supp_Xu)
            %MEAS_WASS_DEF Define a new wasserstein measure 
            vars_new = struct('x', [], 'y', []);
            varnames = fields(vars_new);
            for i = 1:length(varnames)
                curr_name = varnames{i};
                curr_var = obj.vars.(curr_name);
                
                if ~isempty(curr_var)
                    %declare a new variable
                    new_name = [curr_name, suffix];
                    mpol(new_name, length(curr_var), 1);
                    %load the new variable into vars_new
                    vars_new.(curr_name) = eval(new_name);
                end
%                 obj.vars.(curr_var) = vars.(curr_var);
            end
            
            supp_new = subs_vars([supp_X; supp_Xu], [obj.vars.x; obj.vars.y], ...
                        [vars_new.x; vars_new.y]);
                    
            meas_new = meas_wass(vars_new, supp_new);
           
        end
        
        function dist_out = process_distance(obj,dist_in)
            %PROCESS_DISTANCE turn the distance penalty into a scalar or a
            %cell. If it is a scalar, no changes needed. If it is a vector,
            %turn it into a cell.
              
            if iscell(dist_in)
                dist_out = dist_in;
                %get rid of cell wrapper if distance is truly scalar
                if length(dist_in) == 1 && length(dist_in{1}) == 1
                    dist_out = dist_in{1};
                end
            else
                %dist_in is a supcon scalar or vector
                if length(dist_in) == 1
                    dist_out = dist_in;
                else
                    %wrap supcon vector in a cell for 'objective_con'
                    %processing
                    dist_out = {dist_in};
                end
            end
        end
        
        %% Constraint Generation
        function [obj_min, obj_con] = objective_con(obj, dist)
            %OBJECTIVE_CON deal with the objective, which is the
            %expectation of distance with regards to the wasserstein
            %penalty. This is a minimization, so obj_min is necessary
            if nargin == 1
                dist = obj.dist;
            end
                                    
            obj_con = [];
            joint_vars = [obj.vars.x; obj.vars.y];
            if isempty(dist)
                obj_min = 0;
            elseif (length(dist) == 1) && ~iscell(dist)
                %a scalar distance penalty, no lifting necessary
                dist_subs = 0;
                for i = 1:length(obj.wass)
                    dist_subs = dist_subs + mom(obj.wass{i}.var_sub(joint_vars, dist));
                end
                obj_min = (dist_subs);                            
            else                
                %dist is a cell, deal with cells
                %includes linear programming lifts
                obj_min = 0;
                obj_con = [];
                obj.len_dual.beta = zeros(dist, 1);
                for j =1:length(dist)
                    
                    %process the name of the variable q
                    q_name = 'q';
                    if ~isempty(obj.id)
                        q_name = [q_name, '_', num2str(obj.id)];
                    end
                    if length(dist) > 1
                        q_name = [q_name, '_', num2str(j)];
                    end
                    obj.len_dual.beta(j) = length(dist{j});

                    %insantiate and store the variable q
                    mpol(q_name, 1, 1);
                    q = eval(q_name);
                    muq = meas(q);
                    obj.cost_q = [obj.cost_q; q];
                    
                    %objective with q
                    obj_min = obj_min + mom(q);
                    
                    %generate constraints 
                    dist_curr = dist{j};
                    dist_subs = 0;
                    %sum up the expectation (moment) of distance 
                    %from each unsafe set's wasserstein measure
                    for i = 1:length(obj.wass)
                        dist_subs = dist_subs + mom(obj.wass{i}.var_sub(joint_vars, dist_curr));
                    end
                    
                    %moment constraint with q
                    obj_con = [obj_con; mass(q) == 1; (mom(q) >= dist_subs);];
                end                                              
            end
            
        end
        
        function cons = marg_wass_con(obj, d)
            %MARG_WASS_CON Constrain the x-marginals of the total 
            %wasserstein measureto align to the x-marginals of the peak 
            %measure.
            
            %wasserstein marginals
            marg_wass = 0;
            for i = 1:length(obj.wass)
                marg_wass = marg_wass + obj.wass{i}.mom_monom_x(d);
            end
            
            %terminal marginals
            marg_term = obj.term.mom_monom_x(d);
            
            %equality of marginals
            %check the signs for nonnegativity and recovery
            cons = (marg_wass - marg_term);            
        end
        
        function [objective, cons_eq, cons_ineq] = all_cons(obj, d)
            %ALL_CONS all constraints involving solely location
            %does not include sum of mass of initial measures
            %Output:
            %   cons_eq: equality constraints
            %   cons_ineq: inequality constraints (objective)
            
            %gather all constraints together
            liou = obj.liou_con(d);
            len_liou = length(liou);
            [abscont, len_abscont] = obj.abscont_con(d);
            
            [objective, cons_ineq] = obj.objective_con();
            
            marg = obj.marg_wass_con(d);
            len_marg = length(marg);
            
            %package up the output
            obj.len_dual.v = len_liou;
            obj.len_dual.zeta = len_abscont;
            obj.len_dual.w = len_marg;
            obj.len_dual.beta = length(cons_ineq);
            
            %ensure this iss the correct sign
            cons_eq = [-liou; abscont; marg]==0;                        
        end
        
        function [len_out] = len_eq_cons(obj)
            %LEN_EQ_CONS Number of equality constraints strictly in this
            %location 
            len_out = obj.len_dual.v + sum(obj.len_dual.zeta) + obj.len_dual.w;
        end
        
        function obj = dual_process(obj, d, rec_eq, rec_ineq, gamma)
             %DUAL_PROCESS turn the dual variables from solution into 
             %polynomials and interpretable quantities
             %
             %Input:
             %  d:          2*order, order of auxiliary polynomials
             %  rec_eq:     dual variables from equality constraints
             %  rec_ineq:   dual variables from inequality constraints
             %  gamma:      objective value (as a dual variable)
             %TODO: fix this so that boxes can be used
             
             %numeric quantities
             obj.dual.solved = 1;
             
%              obj.dual.beta = rec_ineq;
             obj.dual.gamma = gamma;
             
             beta_count = 0;      
             if obj.len_dual.beta == 0
                 obj.dual.beta = 1;
             else
                 Nterms = length(obj.dist);
                 obj.dual.beta = cell(Nterms, 1);
                 for i =1:Nterms
                     obj.dual.beta{i} = rec_ineq(beta_count + (1:obj.len_dual.beta));
                 end
             end
             
             %process the polynomials
             
             %auxiliary function v
             v_coeff = rec_eq(1:obj.len_dual.v);
             monom = mmon(obj.get_vars_end(), 0, d);
             obj.dual.v = v_coeff'*monom;
             
             count_zeta = obj.len_dual.v;
             
             %iterate through all subsystems
             Nb = length(obj.vars.b);
             monom_all = mmon(obj.get_vars(), 0, d);
             
             %TODO: confirm that all abscont relations have the same length
             len_monom_all = length(monom_all);
             for i = 1:length(obj.sys)       
                 
                 %untangle the box zeta functions
                 zeta = [];
                 for j = 1:Nb
                     zeta_coeff = rec_eq(count_zeta + (1:len_monom_all));
                     zeta_curr = zeta_coeff'*monom_all;
                     zeta = [zeta; zeta_curr];   
                     
                     count_zeta = count_zeta + len_monom_all;
                 end
                 

                 %ship off dual variables for processing in subsystem 
                 obj.sys{i} = obj.sys{i}.dual_process(obj.dual.v, zeta);       
                 
                 
                 %figure out nonnegativity requirement
             end
             
             %take care of the marginal constraint w(x)
             w_coeff = rec_eq(count_zeta + (1:obj.len_dual.w));
%              x_monom = 
             x_monom = mmon(obj.vars.x, 0, d);
             obj.dual.w = w_coeff'*x_monom;
            
             %nonnegativity of location (not subsystems)
            %initial measure
            if isempty(obj.init)
                nn_init = 0;
            else
                nn_init = -obj.dual.gamma + obj.dual.v;
            end
            
            %terminal measure
            if isempty(obj.term)
                nn_term = 0;
            else
%                 nn_term = obj.dual.v - obj.dual.beta'*obj.objective;
                nn_term = obj.dual.w - obj.dual.v;
            end
            
            if obj.len_dual.beta == 0
               nn_wass = obj.dist - obj.dual.w; 
            else
                nn_wass = -obj.dual.w;
                for i = 1:length(obj.dist)
                    nn_wass = nn_wass + obj.dual.beta{i}'*obj.dist{i};
                end
            end
            
            %process the wasserstein dual
            obj.dual.nn = [nn_init; nn_term; nn_wass];
             
        end      
        
        %% support 
        function supp_con_out = supp_con(obj)
            supp_con_out = supp_con@location(obj);
            wass_supp=[];
            for i =1:length(obj.wass)
                wass_supp = [wass_supp; obj.wass{i}.supp];
            end
            
        end
        
    end
end

